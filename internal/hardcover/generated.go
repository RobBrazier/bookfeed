// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package hardcover

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// Book includes the GraphQL fields of books requested by the fragment Book.
// The GraphQL type's documentation follows.
//
// columns and relationships of "books"
type Book struct {
	Title       string    `json:"title"`
	Id          int       `json:"id"`
	Slug        string    `json:"slug"`
	ReleaseDate time.Time `json:"-"`
	UsersCount  int       `json:"usersCount"`
	Description string    `json:"description"`
	// An array relationship
	Contributions []BookContributions `json:"contributions"`
	Compilation   bool                `json:"compilation"`
	// An object relationship
	Image BookImageImages `json:"image"`
	// An array relationship
	BookSeries []BookBookSeriesBook_series `json:"bookSeries"`
}

// GetTitle returns Book.Title, and is useful for accessing the field via an interface.
func (v *Book) GetTitle() string { return v.Title }

// GetId returns Book.Id, and is useful for accessing the field via an interface.
func (v *Book) GetId() int { return v.Id }

// GetSlug returns Book.Slug, and is useful for accessing the field via an interface.
func (v *Book) GetSlug() string { return v.Slug }

// GetReleaseDate returns Book.ReleaseDate, and is useful for accessing the field via an interface.
func (v *Book) GetReleaseDate() time.Time { return v.ReleaseDate }

// GetUsersCount returns Book.UsersCount, and is useful for accessing the field via an interface.
func (v *Book) GetUsersCount() int { return v.UsersCount }

// GetDescription returns Book.Description, and is useful for accessing the field via an interface.
func (v *Book) GetDescription() string { return v.Description }

// GetContributions returns Book.Contributions, and is useful for accessing the field via an interface.
func (v *Book) GetContributions() []BookContributions { return v.Contributions }

// GetCompilation returns Book.Compilation, and is useful for accessing the field via an interface.
func (v *Book) GetCompilation() bool { return v.Compilation }

// GetImage returns Book.Image, and is useful for accessing the field via an interface.
func (v *Book) GetImage() BookImageImages { return v.Image }

// GetBookSeries returns Book.BookSeries, and is useful for accessing the field via an interface.
func (v *Book) GetBookSeries() []BookBookSeriesBook_series { return v.BookSeries }

func (v *Book) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*Book
		ReleaseDate json.RawMessage `json:"releaseDate"`
		graphql.NoUnmarshalJSON
	}
	firstPass.Book = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ReleaseDate
		src := firstPass.ReleaseDate
		if len(src) != 0 && string(src) != "null" {
			err = UnmarshalHardcoverDate(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal Book.ReleaseDate: %w", err)
			}
		}
	}
	return nil
}

type __premarshalBook struct {
	Title string `json:"title"`

	Id int `json:"id"`

	Slug string `json:"slug"`

	ReleaseDate json.RawMessage `json:"releaseDate"`

	UsersCount int `json:"usersCount"`

	Description string `json:"description"`

	Contributions []BookContributions `json:"contributions"`

	Compilation bool `json:"compilation"`

	Image BookImageImages `json:"image"`

	BookSeries []BookBookSeriesBook_series `json:"bookSeries"`
}

func (v *Book) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *Book) __premarshalJSON() (*__premarshalBook, error) {
	var retval __premarshalBook

	retval.Title = v.Title
	retval.Id = v.Id
	retval.Slug = v.Slug
	{

		dst := &retval.ReleaseDate
		src := v.ReleaseDate
		var err error
		*dst, err = MarshalHardcoverDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal Book.ReleaseDate: %w", err)
		}
	}
	retval.UsersCount = v.UsersCount
	retval.Description = v.Description
	retval.Contributions = v.Contributions
	retval.Compilation = v.Compilation
	retval.Image = v.Image
	retval.BookSeries = v.BookSeries
	return &retval, nil
}

// BookBookSeriesBook_series includes the requested fields of the GraphQL type book_series.
// The GraphQL type's documentation follows.
//
// columns and relationships of "book_series"
type BookBookSeriesBook_series struct {
	// An object relationship
	Series   BookBookSeriesBook_seriesSeries `json:"series"`
	Position float32                         `json:"position"`
}

// GetSeries returns BookBookSeriesBook_series.Series, and is useful for accessing the field via an interface.
func (v *BookBookSeriesBook_series) GetSeries() BookBookSeriesBook_seriesSeries { return v.Series }

// GetPosition returns BookBookSeriesBook_series.Position, and is useful for accessing the field via an interface.
func (v *BookBookSeriesBook_series) GetPosition() float32 { return v.Position }

// BookBookSeriesBook_seriesSeries includes the requested fields of the GraphQL type series.
// The GraphQL type's documentation follows.
//
// columns and relationships of "series"
type BookBookSeriesBook_seriesSeries struct {
	Name string `json:"name"`
	Slug string `json:"slug"`
}

// GetName returns BookBookSeriesBook_seriesSeries.Name, and is useful for accessing the field via an interface.
func (v *BookBookSeriesBook_seriesSeries) GetName() string { return v.Name }

// GetSlug returns BookBookSeriesBook_seriesSeries.Slug, and is useful for accessing the field via an interface.
func (v *BookBookSeriesBook_seriesSeries) GetSlug() string { return v.Slug }

// BookContributions includes the requested fields of the GraphQL type contributions.
// The GraphQL type's documentation follows.
//
// columns and relationships of "contributions"
type BookContributions struct {
	// An object relationship
	Author BookContributionsAuthorAuthors `json:"author"`
}

// GetAuthor returns BookContributions.Author, and is useful for accessing the field via an interface.
func (v *BookContributions) GetAuthor() BookContributionsAuthorAuthors { return v.Author }

// BookContributionsAuthorAuthors includes the requested fields of the GraphQL type authors.
// The GraphQL type's documentation follows.
//
// columns and relationships of "authors"
type BookContributionsAuthorAuthors struct {
	Name string `json:"name"`
}

// GetName returns BookContributionsAuthorAuthors.Name, and is useful for accessing the field via an interface.
func (v *BookContributionsAuthorAuthors) GetName() string { return v.Name }

// BookImageImages includes the requested fields of the GraphQL type images.
// The GraphQL type's documentation follows.
//
// columns and relationships of "images"
type BookImageImages struct {
	Url    string  `json:"url"`
	Width  int     `json:"width"`
	Height int     `json:"height"`
	Ratio  float32 `json:"ratio"`
}

// GetUrl returns BookImageImages.Url, and is useful for accessing the field via an interface.
func (v *BookImageImages) GetUrl() string { return v.Url }

// GetWidth returns BookImageImages.Width, and is useful for accessing the field via an interface.
func (v *BookImageImages) GetWidth() int { return v.Width }

// GetHeight returns BookImageImages.Height, and is useful for accessing the field via an interface.
func (v *BookImageImages) GetHeight() int { return v.Height }

// GetRatio returns BookImageImages.Ratio, and is useful for accessing the field via an interface.
func (v *BookImageImages) GetRatio() float32 { return v.Ratio }

// RecentAuthorReleasesContributions includes the requested fields of the GraphQL type contributions.
// The GraphQL type's documentation follows.
//
// columns and relationships of "contributions"
type RecentAuthorReleasesContributions struct {
	// An object relationship
	Author RecentAuthorReleasesContributionsAuthorAuthors `json:"author"`
	// An object relationship
	Book Book `json:"book"`
}

// GetAuthor returns RecentAuthorReleasesContributions.Author, and is useful for accessing the field via an interface.
func (v *RecentAuthorReleasesContributions) GetAuthor() RecentAuthorReleasesContributionsAuthorAuthors {
	return v.Author
}

// GetBook returns RecentAuthorReleasesContributions.Book, and is useful for accessing the field via an interface.
func (v *RecentAuthorReleasesContributions) GetBook() Book { return v.Book }

// RecentAuthorReleasesContributionsAuthorAuthors includes the requested fields of the GraphQL type authors.
// The GraphQL type's documentation follows.
//
// columns and relationships of "authors"
type RecentAuthorReleasesContributionsAuthorAuthors struct {
	Name string `json:"name"`
}

// GetName returns RecentAuthorReleasesContributionsAuthorAuthors.Name, and is useful for accessing the field via an interface.
func (v *RecentAuthorReleasesContributionsAuthorAuthors) GetName() string { return v.Name }

// RecentAuthorReleasesResponse is returned by RecentAuthorReleases on success.
type RecentAuthorReleasesResponse struct {
	// An array relationship
	Contributions []RecentAuthorReleasesContributions `json:"contributions"`
}

// GetContributions returns RecentAuthorReleasesResponse.Contributions, and is useful for accessing the field via an interface.
func (v *RecentAuthorReleasesResponse) GetContributions() []RecentAuthorReleasesContributions {
	return v.Contributions
}

// RecentReleasesResponse is returned by RecentReleases on success.
type RecentReleasesResponse struct {
	// An array relationship
	Books []Book `json:"books"`
}

// GetBooks returns RecentReleasesResponse.Books, and is useful for accessing the field via an interface.
func (v *RecentReleasesResponse) GetBooks() []Book { return v.Books }

// RecentSeriesReleasesBookSeriesBook_series includes the requested fields of the GraphQL type book_series.
// The GraphQL type's documentation follows.
//
// columns and relationships of "book_series"
type RecentSeriesReleasesBookSeriesBook_series struct {
	// An object relationship
	Series RecentSeriesReleasesBookSeriesBook_seriesSeries `json:"series"`
	// An object relationship
	Book Book `json:"book"`
}

// GetSeries returns RecentSeriesReleasesBookSeriesBook_series.Series, and is useful for accessing the field via an interface.
func (v *RecentSeriesReleasesBookSeriesBook_series) GetSeries() RecentSeriesReleasesBookSeriesBook_seriesSeries {
	return v.Series
}

// GetBook returns RecentSeriesReleasesBookSeriesBook_series.Book, and is useful for accessing the field via an interface.
func (v *RecentSeriesReleasesBookSeriesBook_series) GetBook() Book { return v.Book }

// RecentSeriesReleasesBookSeriesBook_seriesSeries includes the requested fields of the GraphQL type series.
// The GraphQL type's documentation follows.
//
// columns and relationships of "series"
type RecentSeriesReleasesBookSeriesBook_seriesSeries struct {
	Name string `json:"name"`
}

// GetName returns RecentSeriesReleasesBookSeriesBook_seriesSeries.Name, and is useful for accessing the field via an interface.
func (v *RecentSeriesReleasesBookSeriesBook_seriesSeries) GetName() string { return v.Name }

// RecentSeriesReleasesResponse is returned by RecentSeriesReleases on success.
type RecentSeriesReleasesResponse struct {
	// fetch data from the table: "series"
	Series []RecentSeriesReleasesSeries `json:"series"`
	// An array relationship
	BookSeries []RecentSeriesReleasesBookSeriesBook_series `json:"bookSeries"`
}

// GetSeries returns RecentSeriesReleasesResponse.Series, and is useful for accessing the field via an interface.
func (v *RecentSeriesReleasesResponse) GetSeries() []RecentSeriesReleasesSeries { return v.Series }

// GetBookSeries returns RecentSeriesReleasesResponse.BookSeries, and is useful for accessing the field via an interface.
func (v *RecentSeriesReleasesResponse) GetBookSeries() []RecentSeriesReleasesBookSeriesBook_series {
	return v.BookSeries
}

// RecentSeriesReleasesSeries includes the requested fields of the GraphQL type series.
// The GraphQL type's documentation follows.
//
// columns and relationships of "series"
type RecentSeriesReleasesSeries struct {
	Name string `json:"name"`
	Slug string `json:"slug"`
}

// GetName returns RecentSeriesReleasesSeries.Name, and is useful for accessing the field via an interface.
func (v *RecentSeriesReleasesSeries) GetName() string { return v.Name }

// GetSlug returns RecentSeriesReleasesSeries.Slug, and is useful for accessing the field via an interface.
func (v *RecentSeriesReleasesSeries) GetSlug() string { return v.Slug }

// __RecentAuthorReleasesInput is used internally by genqlient
type __RecentAuthorReleasesInput struct {
	Now          time.Time `json:"-"`
	Slug         string    `json:"slug"`
	Compilations bool      `json:"compilations"`
}

// GetNow returns __RecentAuthorReleasesInput.Now, and is useful for accessing the field via an interface.
func (v *__RecentAuthorReleasesInput) GetNow() time.Time { return v.Now }

// GetSlug returns __RecentAuthorReleasesInput.Slug, and is useful for accessing the field via an interface.
func (v *__RecentAuthorReleasesInput) GetSlug() string { return v.Slug }

// GetCompilations returns __RecentAuthorReleasesInput.Compilations, and is useful for accessing the field via an interface.
func (v *__RecentAuthorReleasesInput) GetCompilations() bool { return v.Compilations }

func (v *__RecentAuthorReleasesInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*__RecentAuthorReleasesInput
		Now json.RawMessage `json:"now"`
		graphql.NoUnmarshalJSON
	}
	firstPass.__RecentAuthorReleasesInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Now
		src := firstPass.Now
		if len(src) != 0 && string(src) != "null" {
			err = UnmarshalHardcoverDate(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal __RecentAuthorReleasesInput.Now: %w", err)
			}
		}
	}
	return nil
}

type __premarshal__RecentAuthorReleasesInput struct {
	Now json.RawMessage `json:"now"`

	Slug string `json:"slug"`

	Compilations bool `json:"compilations"`
}

func (v *__RecentAuthorReleasesInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *__RecentAuthorReleasesInput) __premarshalJSON() (*__premarshal__RecentAuthorReleasesInput, error) {
	var retval __premarshal__RecentAuthorReleasesInput

	{

		dst := &retval.Now
		src := v.Now
		var err error
		*dst, err = MarshalHardcoverDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal __RecentAuthorReleasesInput.Now: %w", err)
		}
	}
	retval.Slug = v.Slug
	retval.Compilations = v.Compilations
	return &retval, nil
}

// __RecentReleasesInput is used internally by genqlient
type __RecentReleasesInput struct {
	Now       time.Time `json:"-"`
	LastMonth time.Time `json:"-"`
	Slug      string    `json:"slug"`
}

// GetNow returns __RecentReleasesInput.Now, and is useful for accessing the field via an interface.
func (v *__RecentReleasesInput) GetNow() time.Time { return v.Now }

// GetLastMonth returns __RecentReleasesInput.LastMonth, and is useful for accessing the field via an interface.
func (v *__RecentReleasesInput) GetLastMonth() time.Time { return v.LastMonth }

// GetSlug returns __RecentReleasesInput.Slug, and is useful for accessing the field via an interface.
func (v *__RecentReleasesInput) GetSlug() string { return v.Slug }

func (v *__RecentReleasesInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*__RecentReleasesInput
		Now       json.RawMessage `json:"now"`
		LastMonth json.RawMessage `json:"lastMonth"`
		graphql.NoUnmarshalJSON
	}
	firstPass.__RecentReleasesInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Now
		src := firstPass.Now
		if len(src) != 0 && string(src) != "null" {
			err = UnmarshalHardcoverDate(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal __RecentReleasesInput.Now: %w", err)
			}
		}
	}

	{
		dst := &v.LastMonth
		src := firstPass.LastMonth
		if len(src) != 0 && string(src) != "null" {
			err = UnmarshalHardcoverDate(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal __RecentReleasesInput.LastMonth: %w", err)
			}
		}
	}
	return nil
}

type __premarshal__RecentReleasesInput struct {
	Now json.RawMessage `json:"now"`

	LastMonth json.RawMessage `json:"lastMonth"`

	Slug string `json:"slug"`
}

func (v *__RecentReleasesInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *__RecentReleasesInput) __premarshalJSON() (*__premarshal__RecentReleasesInput, error) {
	var retval __premarshal__RecentReleasesInput

	{

		dst := &retval.Now
		src := v.Now
		var err error
		*dst, err = MarshalHardcoverDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal __RecentReleasesInput.Now: %w", err)
		}
	}
	{

		dst := &retval.LastMonth
		src := v.LastMonth
		var err error
		*dst, err = MarshalHardcoverDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal __RecentReleasesInput.LastMonth: %w", err)
		}
	}
	retval.Slug = v.Slug
	return &retval, nil
}

// __RecentSeriesReleasesInput is used internally by genqlient
type __RecentSeriesReleasesInput struct {
	Now          time.Time `json:"-"`
	Slug         string    `json:"slug"`
	Compilations bool      `json:"compilations"`
}

// GetNow returns __RecentSeriesReleasesInput.Now, and is useful for accessing the field via an interface.
func (v *__RecentSeriesReleasesInput) GetNow() time.Time { return v.Now }

// GetSlug returns __RecentSeriesReleasesInput.Slug, and is useful for accessing the field via an interface.
func (v *__RecentSeriesReleasesInput) GetSlug() string { return v.Slug }

// GetCompilations returns __RecentSeriesReleasesInput.Compilations, and is useful for accessing the field via an interface.
func (v *__RecentSeriesReleasesInput) GetCompilations() bool { return v.Compilations }

func (v *__RecentSeriesReleasesInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*__RecentSeriesReleasesInput
		Now json.RawMessage `json:"now"`
		graphql.NoUnmarshalJSON
	}
	firstPass.__RecentSeriesReleasesInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Now
		src := firstPass.Now
		if len(src) != 0 && string(src) != "null" {
			err = UnmarshalHardcoverDate(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal __RecentSeriesReleasesInput.Now: %w", err)
			}
		}
	}
	return nil
}

type __premarshal__RecentSeriesReleasesInput struct {
	Now json.RawMessage `json:"now"`

	Slug string `json:"slug"`

	Compilations bool `json:"compilations"`
}

func (v *__RecentSeriesReleasesInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *__RecentSeriesReleasesInput) __premarshalJSON() (*__premarshal__RecentSeriesReleasesInput, error) {
	var retval __premarshal__RecentSeriesReleasesInput

	{

		dst := &retval.Now
		src := v.Now
		var err error
		*dst, err = MarshalHardcoverDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal __RecentSeriesReleasesInput.Now: %w", err)
		}
	}
	retval.Slug = v.Slug
	retval.Compilations = v.Compilations
	return &retval, nil
}

// The query executed by RecentAuthorReleases.
const RecentAuthorReleases_Operation = `
query RecentAuthorReleases ($now: date, $slug: String, $compilations: Boolean = false) {
	contributions(where: {author:{slug:{_eq:$slug}},book:{release_date:{_lte:$now},book_mappings:{id:{_is_null:false}},compilation:{_in:[$compilations,false]}}}, order_by: {book:{release_date:desc_nulls_last}}, limit: 25) {
		author {
			name
		}
		book {
			... Book
		}
	}
}
fragment Book on books {
	title
	id
	slug
	releaseDate: release_date
	usersCount: users_count
	description
	contributions {
		author {
			name
		}
	}
	compilation
	image {
		url
		width
		height
		ratio
	}
	bookSeries: book_series(where: {_or:[{featured:{_eq:true}},{series:{slug:{_eq:$slug}}}]}) {
		series {
			name
			slug
		}
		position
	}
}
`

func RecentAuthorReleases(
	ctx_ context.Context,
	client_ graphql.Client,
	now time.Time,
	slug string,
	compilations bool,
) (data_ *RecentAuthorReleasesResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "RecentAuthorReleases",
		Query:  RecentAuthorReleases_Operation,
		Variables: &__RecentAuthorReleasesInput{
			Now:          now,
			Slug:         slug,
			Compilations: compilations,
		},
	}

	data_ = &RecentAuthorReleasesResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by RecentReleases.
const RecentReleases_Operation = `
query RecentReleases ($now: date, $lastMonth: date, $slug: String = "") {
	books(order_by: {users_count:desc_nulls_last}, where: {release_date:{_lte:$now,_gte:$lastMonth}}, limit: 25) {
		... Book
	}
}
fragment Book on books {
	title
	id
	slug
	releaseDate: release_date
	usersCount: users_count
	description
	contributions {
		author {
			name
		}
	}
	compilation
	image {
		url
		width
		height
		ratio
	}
	bookSeries: book_series(where: {_or:[{featured:{_eq:true}},{series:{slug:{_eq:$slug}}}]}) {
		series {
			name
			slug
		}
		position
	}
}
`

func RecentReleases(
	ctx_ context.Context,
	client_ graphql.Client,
	now time.Time,
	lastMonth time.Time,
	slug string,
) (data_ *RecentReleasesResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "RecentReleases",
		Query:  RecentReleases_Operation,
		Variables: &__RecentReleasesInput{
			Now:       now,
			LastMonth: lastMonth,
			Slug:      slug,
		},
	}

	data_ = &RecentReleasesResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by RecentSeriesReleases.
const RecentSeriesReleases_Operation = `
query RecentSeriesReleases ($now: date, $slug: String, $compilations: Boolean = false) {
	series(where: {slug:{_eq:$slug}}) {
		name
		slug
	}
	bookSeries: book_series(where: {series:{slug:{_eq:$slug}},book:{release_date:{_lte:$now},book_mappings:{id:{_is_null:false}},compilation:{_in:[$compilations,false]}}}, order_by: {book:{release_date:desc_nulls_last}}, limit: 25) {
		series {
			name
		}
		book {
			... Book
		}
	}
}
fragment Book on books {
	title
	id
	slug
	releaseDate: release_date
	usersCount: users_count
	description
	contributions {
		author {
			name
		}
	}
	compilation
	image {
		url
		width
		height
		ratio
	}
	bookSeries: book_series(where: {_or:[{featured:{_eq:true}},{series:{slug:{_eq:$slug}}}]}) {
		series {
			name
			slug
		}
		position
	}
}
`

func RecentSeriesReleases(
	ctx_ context.Context,
	client_ graphql.Client,
	now time.Time,
	slug string,
	compilations bool,
) (data_ *RecentSeriesReleasesResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "RecentSeriesReleases",
		Query:  RecentSeriesReleases_Operation,
		Variables: &__RecentSeriesReleasesInput{
			Now:          now,
			Slug:         slug,
			Compilations: compilations,
		},
	}

	data_ = &RecentSeriesReleasesResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
