// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package hardcover

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// Book includes the GraphQL fields of books requested by the fragment Book.
// The GraphQL type's documentation follows.
//
// columns and relationships of "books"
type Book struct {
	Id          int         `json:"id"`
	Slug        string      `json:"slug"`
	Title       string      `json:"title"`
	ReleaseDate time.Time   `json:"-"`
	Headline    string      `json:"headline"`
	Description string      `json:"description"`
	Genres      []BookGenre `json:"genres"`
	// An array relationship
	Contributions  []BookContributions `json:"contributions"`
	Compilation    bool                `json:"compilation"`
	Image          BookImage           `json:"image"`
	FeaturedSeries BookFeaturedSeries  `json:"featuredSeries"`
}

// GetId returns Book.Id, and is useful for accessing the field via an interface.
func (v *Book) GetId() int { return v.Id }

// GetSlug returns Book.Slug, and is useful for accessing the field via an interface.
func (v *Book) GetSlug() string { return v.Slug }

// GetTitle returns Book.Title, and is useful for accessing the field via an interface.
func (v *Book) GetTitle() string { return v.Title }

// GetReleaseDate returns Book.ReleaseDate, and is useful for accessing the field via an interface.
func (v *Book) GetReleaseDate() time.Time { return v.ReleaseDate }

// GetHeadline returns Book.Headline, and is useful for accessing the field via an interface.
func (v *Book) GetHeadline() string { return v.Headline }

// GetDescription returns Book.Description, and is useful for accessing the field via an interface.
func (v *Book) GetDescription() string { return v.Description }

// GetGenres returns Book.Genres, and is useful for accessing the field via an interface.
func (v *Book) GetGenres() []BookGenre { return v.Genres }

// GetContributions returns Book.Contributions, and is useful for accessing the field via an interface.
func (v *Book) GetContributions() []BookContributions { return v.Contributions }

// GetCompilation returns Book.Compilation, and is useful for accessing the field via an interface.
func (v *Book) GetCompilation() bool { return v.Compilation }

// GetImage returns Book.Image, and is useful for accessing the field via an interface.
func (v *Book) GetImage() BookImage { return v.Image }

// GetFeaturedSeries returns Book.FeaturedSeries, and is useful for accessing the field via an interface.
func (v *Book) GetFeaturedSeries() BookFeaturedSeries { return v.FeaturedSeries }

func (v *Book) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*Book
		ReleaseDate json.RawMessage `json:"releaseDate"`
		graphql.NoUnmarshalJSON
	}
	firstPass.Book = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ReleaseDate
		src := firstPass.ReleaseDate
		if len(src) != 0 && string(src) != "null" {
			err = UnmarshalHardcoverDate(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal Book.ReleaseDate: %w", err)
			}
		}
	}
	return nil
}

type __premarshalBook struct {
	Id int `json:"id"`

	Slug string `json:"slug"`

	Title string `json:"title"`

	ReleaseDate json.RawMessage `json:"releaseDate"`

	Headline string `json:"headline"`

	Description string `json:"description"`

	Genres []BookGenre `json:"genres"`

	Contributions []BookContributions `json:"contributions"`

	Compilation bool `json:"compilation"`

	Image BookImage `json:"image"`

	FeaturedSeries BookFeaturedSeries `json:"featuredSeries"`
}

func (v *Book) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *Book) __premarshalJSON() (*__premarshalBook, error) {
	var retval __premarshalBook

	retval.Id = v.Id
	retval.Slug = v.Slug
	retval.Title = v.Title
	{

		dst := &retval.ReleaseDate
		src := v.ReleaseDate
		var err error
		*dst, err = MarshalHardcoverDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal Book.ReleaseDate: %w", err)
		}
	}
	retval.Headline = v.Headline
	retval.Description = v.Description
	retval.Genres = v.Genres
	retval.Contributions = v.Contributions
	retval.Compilation = v.Compilation
	retval.Image = v.Image
	retval.FeaturedSeries = v.FeaturedSeries
	return &retval, nil
}

// BookContributions includes the requested fields of the GraphQL type contributions.
// The GraphQL type's documentation follows.
//
// columns and relationships of "contributions"
type BookContributions struct {
	// An object relationship
	Author BookContributionsAuthorAuthors `json:"author"`
}

// GetAuthor returns BookContributions.Author, and is useful for accessing the field via an interface.
func (v *BookContributions) GetAuthor() BookContributionsAuthorAuthors { return v.Author }

// BookContributionsAuthorAuthors includes the requested fields of the GraphQL type authors.
// The GraphQL type's documentation follows.
//
// columns and relationships of "authors"
type BookContributionsAuthorAuthors struct {
	Name string `json:"name"`
}

// GetName returns BookContributionsAuthorAuthors.Name, and is useful for accessing the field via an interface.
func (v *BookContributionsAuthorAuthors) GetName() string { return v.Name }

// RecentAuthorReleasesAuthors includes the requested fields of the GraphQL type authors.
// The GraphQL type's documentation follows.
//
// columns and relationships of "authors"
type RecentAuthorReleasesAuthors struct {
	Name string `json:"name"`
	Slug string `json:"slug"`
	// An array relationship
	Contributions []RecentAuthorReleasesAuthorsContributions `json:"contributions"`
}

// GetName returns RecentAuthorReleasesAuthors.Name, and is useful for accessing the field via an interface.
func (v *RecentAuthorReleasesAuthors) GetName() string { return v.Name }

// GetSlug returns RecentAuthorReleasesAuthors.Slug, and is useful for accessing the field via an interface.
func (v *RecentAuthorReleasesAuthors) GetSlug() string { return v.Slug }

// GetContributions returns RecentAuthorReleasesAuthors.Contributions, and is useful for accessing the field via an interface.
func (v *RecentAuthorReleasesAuthors) GetContributions() []RecentAuthorReleasesAuthorsContributions {
	return v.Contributions
}

// RecentAuthorReleasesAuthorsContributions includes the requested fields of the GraphQL type contributions.
// The GraphQL type's documentation follows.
//
// columns and relationships of "contributions"
type RecentAuthorReleasesAuthorsContributions struct {
	// An object relationship
	Author RecentAuthorReleasesAuthorsContributionsAuthorAuthors `json:"author"`
	// An object relationship
	Book Book `json:"book"`
}

// GetAuthor returns RecentAuthorReleasesAuthorsContributions.Author, and is useful for accessing the field via an interface.
func (v *RecentAuthorReleasesAuthorsContributions) GetAuthor() RecentAuthorReleasesAuthorsContributionsAuthorAuthors {
	return v.Author
}

// GetBook returns RecentAuthorReleasesAuthorsContributions.Book, and is useful for accessing the field via an interface.
func (v *RecentAuthorReleasesAuthorsContributions) GetBook() Book { return v.Book }

// RecentAuthorReleasesAuthorsContributionsAuthorAuthors includes the requested fields of the GraphQL type authors.
// The GraphQL type's documentation follows.
//
// columns and relationships of "authors"
type RecentAuthorReleasesAuthorsContributionsAuthorAuthors struct {
	Name string `json:"name"`
}

// GetName returns RecentAuthorReleasesAuthorsContributionsAuthorAuthors.Name, and is useful for accessing the field via an interface.
func (v *RecentAuthorReleasesAuthorsContributionsAuthorAuthors) GetName() string { return v.Name }

// RecentAuthorReleasesResponse is returned by RecentAuthorReleases on success.
type RecentAuthorReleasesResponse struct {
	// fetch data from the table: "authors"
	Authors []RecentAuthorReleasesAuthors `json:"authors"`
}

// GetAuthors returns RecentAuthorReleasesResponse.Authors, and is useful for accessing the field via an interface.
func (v *RecentAuthorReleasesResponse) GetAuthors() []RecentAuthorReleasesAuthors { return v.Authors }

// RecentReleasesResponse is returned by RecentReleases on success.
type RecentReleasesResponse struct {
	// An array relationship
	Books []Book `json:"books"`
}

// GetBooks returns RecentReleasesResponse.Books, and is useful for accessing the field via an interface.
func (v *RecentReleasesResponse) GetBooks() []Book { return v.Books }

// RecentSeriesReleasesBookSeriesBook_series includes the requested fields of the GraphQL type book_series.
// The GraphQL type's documentation follows.
//
// columns and relationships of "book_series"
type RecentSeriesReleasesBookSeriesBook_series struct {
	// An object relationship
	Series RecentSeriesReleasesBookSeriesBook_seriesSeries `json:"series"`
	// An object relationship
	Book Book `json:"book"`
}

// GetSeries returns RecentSeriesReleasesBookSeriesBook_series.Series, and is useful for accessing the field via an interface.
func (v *RecentSeriesReleasesBookSeriesBook_series) GetSeries() RecentSeriesReleasesBookSeriesBook_seriesSeries {
	return v.Series
}

// GetBook returns RecentSeriesReleasesBookSeriesBook_series.Book, and is useful for accessing the field via an interface.
func (v *RecentSeriesReleasesBookSeriesBook_series) GetBook() Book { return v.Book }

// RecentSeriesReleasesBookSeriesBook_seriesSeries includes the requested fields of the GraphQL type series.
// The GraphQL type's documentation follows.
//
// columns and relationships of "series"
type RecentSeriesReleasesBookSeriesBook_seriesSeries struct {
	Slug string `json:"slug"`
}

// GetSlug returns RecentSeriesReleasesBookSeriesBook_seriesSeries.Slug, and is useful for accessing the field via an interface.
func (v *RecentSeriesReleasesBookSeriesBook_seriesSeries) GetSlug() string { return v.Slug }

// RecentSeriesReleasesResponse is returned by RecentSeriesReleases on success.
type RecentSeriesReleasesResponse struct {
	// fetch data from the table: "series"
	Series []RecentSeriesReleasesSeries `json:"series"`
	// An array relationship
	BookSeries []RecentSeriesReleasesBookSeriesBook_series `json:"bookSeries"`
}

// GetSeries returns RecentSeriesReleasesResponse.Series, and is useful for accessing the field via an interface.
func (v *RecentSeriesReleasesResponse) GetSeries() []RecentSeriesReleasesSeries { return v.Series }

// GetBookSeries returns RecentSeriesReleasesResponse.BookSeries, and is useful for accessing the field via an interface.
func (v *RecentSeriesReleasesResponse) GetBookSeries() []RecentSeriesReleasesBookSeriesBook_series {
	return v.BookSeries
}

// RecentSeriesReleasesSeries includes the requested fields of the GraphQL type series.
// The GraphQL type's documentation follows.
//
// columns and relationships of "series"
type RecentSeriesReleasesSeries struct {
	Name string `json:"name"`
	Slug string `json:"slug"`
}

// GetName returns RecentSeriesReleasesSeries.Name, and is useful for accessing the field via an interface.
func (v *RecentSeriesReleasesSeries) GetName() string { return v.Name }

// GetSlug returns RecentSeriesReleasesSeries.Slug, and is useful for accessing the field via an interface.
func (v *RecentSeriesReleasesSeries) GetSlug() string { return v.Slug }

// UserInterestsResponse is returned by UserInterests on success.
type UserInterestsResponse struct {
	// An array relationship
	Users []UserInterestsUsers `json:"users"`
	// An array relationship
	UserBooks []UserInterestsUserBooksUser_books `json:"userBooks"`
}

// GetUsers returns UserInterestsResponse.Users, and is useful for accessing the field via an interface.
func (v *UserInterestsResponse) GetUsers() []UserInterestsUsers { return v.Users }

// GetUserBooks returns UserInterestsResponse.UserBooks, and is useful for accessing the field via an interface.
func (v *UserInterestsResponse) GetUserBooks() []UserInterestsUserBooksUser_books { return v.UserBooks }

// UserInterestsUserBooksUser_books includes the requested fields of the GraphQL type user_books.
// The GraphQL type's documentation follows.
//
// columns and relationships of "user_books"
type UserInterestsUserBooksUser_books struct {
	// An object relationship
	Book UserInterestsUserBooksUser_booksBookBooks `json:"book"`
}

// GetBook returns UserInterestsUserBooksUser_books.Book, and is useful for accessing the field via an interface.
func (v *UserInterestsUserBooksUser_books) GetBook() UserInterestsUserBooksUser_booksBookBooks {
	return v.Book
}

// UserInterestsUserBooksUser_booksBookBooks includes the requested fields of the GraphQL type books.
// The GraphQL type's documentation follows.
//
// columns and relationships of "books"
type UserInterestsUserBooksUser_booksBookBooks struct {
	Slug           string             `json:"slug"`
	Contributors   []BookContributor  `json:"contributors"`
	FeaturedSeries BookFeaturedSeries `json:"featuredSeries"`
}

// GetSlug returns UserInterestsUserBooksUser_booksBookBooks.Slug, and is useful for accessing the field via an interface.
func (v *UserInterestsUserBooksUser_booksBookBooks) GetSlug() string { return v.Slug }

// GetContributors returns UserInterestsUserBooksUser_booksBookBooks.Contributors, and is useful for accessing the field via an interface.
func (v *UserInterestsUserBooksUser_booksBookBooks) GetContributors() []BookContributor {
	return v.Contributors
}

// GetFeaturedSeries returns UserInterestsUserBooksUser_booksBookBooks.FeaturedSeries, and is useful for accessing the field via an interface.
func (v *UserInterestsUserBooksUser_booksBookBooks) GetFeaturedSeries() BookFeaturedSeries {
	return v.FeaturedSeries
}

// UserInterestsUsers includes the requested fields of the GraphQL type users.
// The GraphQL type's documentation follows.
//
// columns and relationships of "users"
type UserInterestsUsers struct {
	Username string `json:"username"`
}

// GetUsername returns UserInterestsUsers.Username, and is useful for accessing the field via an interface.
func (v *UserInterestsUsers) GetUsername() string { return v.Username }

// __RecentAuthorReleasesInput is used internally by genqlient
type __RecentAuthorReleasesInput struct {
	To           time.Time `json:"-"`
	From         time.Time `json:"-"`
	Slug         []string  `json:"slug"`
	Compilations bool      `json:"compilations"`
}

// GetTo returns __RecentAuthorReleasesInput.To, and is useful for accessing the field via an interface.
func (v *__RecentAuthorReleasesInput) GetTo() time.Time { return v.To }

// GetFrom returns __RecentAuthorReleasesInput.From, and is useful for accessing the field via an interface.
func (v *__RecentAuthorReleasesInput) GetFrom() time.Time { return v.From }

// GetSlug returns __RecentAuthorReleasesInput.Slug, and is useful for accessing the field via an interface.
func (v *__RecentAuthorReleasesInput) GetSlug() []string { return v.Slug }

// GetCompilations returns __RecentAuthorReleasesInput.Compilations, and is useful for accessing the field via an interface.
func (v *__RecentAuthorReleasesInput) GetCompilations() bool { return v.Compilations }

func (v *__RecentAuthorReleasesInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*__RecentAuthorReleasesInput
		To   json.RawMessage `json:"to"`
		From json.RawMessage `json:"from"`
		graphql.NoUnmarshalJSON
	}
	firstPass.__RecentAuthorReleasesInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.To
		src := firstPass.To
		if len(src) != 0 && string(src) != "null" {
			err = UnmarshalHardcoverDate(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal __RecentAuthorReleasesInput.To: %w", err)
			}
		}
	}

	{
		dst := &v.From
		src := firstPass.From
		if len(src) != 0 && string(src) != "null" {
			err = UnmarshalHardcoverDate(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal __RecentAuthorReleasesInput.From: %w", err)
			}
		}
	}
	return nil
}

type __premarshal__RecentAuthorReleasesInput struct {
	To json.RawMessage `json:"to"`

	From json.RawMessage `json:"from"`

	Slug []string `json:"slug"`

	Compilations bool `json:"compilations"`
}

func (v *__RecentAuthorReleasesInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *__RecentAuthorReleasesInput) __premarshalJSON() (*__premarshal__RecentAuthorReleasesInput, error) {
	var retval __premarshal__RecentAuthorReleasesInput

	{

		dst := &retval.To
		src := v.To
		var err error
		*dst, err = MarshalHardcoverDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal __RecentAuthorReleasesInput.To: %w", err)
		}
	}
	{

		dst := &retval.From
		src := v.From
		var err error
		*dst, err = MarshalHardcoverDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal __RecentAuthorReleasesInput.From: %w", err)
		}
	}
	retval.Slug = v.Slug
	retval.Compilations = v.Compilations
	return &retval, nil
}

// __RecentReleasesInput is used internally by genqlient
type __RecentReleasesInput struct {
	To   time.Time `json:"-"`
	From time.Time `json:"-"`
}

// GetTo returns __RecentReleasesInput.To, and is useful for accessing the field via an interface.
func (v *__RecentReleasesInput) GetTo() time.Time { return v.To }

// GetFrom returns __RecentReleasesInput.From, and is useful for accessing the field via an interface.
func (v *__RecentReleasesInput) GetFrom() time.Time { return v.From }

func (v *__RecentReleasesInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*__RecentReleasesInput
		To   json.RawMessage `json:"to"`
		From json.RawMessage `json:"from"`
		graphql.NoUnmarshalJSON
	}
	firstPass.__RecentReleasesInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.To
		src := firstPass.To
		if len(src) != 0 && string(src) != "null" {
			err = UnmarshalHardcoverDate(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal __RecentReleasesInput.To: %w", err)
			}
		}
	}

	{
		dst := &v.From
		src := firstPass.From
		if len(src) != 0 && string(src) != "null" {
			err = UnmarshalHardcoverDate(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal __RecentReleasesInput.From: %w", err)
			}
		}
	}
	return nil
}

type __premarshal__RecentReleasesInput struct {
	To json.RawMessage `json:"to"`

	From json.RawMessage `json:"from"`
}

func (v *__RecentReleasesInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *__RecentReleasesInput) __premarshalJSON() (*__premarshal__RecentReleasesInput, error) {
	var retval __premarshal__RecentReleasesInput

	{

		dst := &retval.To
		src := v.To
		var err error
		*dst, err = MarshalHardcoverDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal __RecentReleasesInput.To: %w", err)
		}
	}
	{

		dst := &retval.From
		src := v.From
		var err error
		*dst, err = MarshalHardcoverDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal __RecentReleasesInput.From: %w", err)
		}
	}
	return &retval, nil
}

// __RecentSeriesReleasesInput is used internally by genqlient
type __RecentSeriesReleasesInput struct {
	To           time.Time `json:"-"`
	From         time.Time `json:"-"`
	Slug         []string  `json:"slug"`
	Compilations bool      `json:"compilations"`
}

// GetTo returns __RecentSeriesReleasesInput.To, and is useful for accessing the field via an interface.
func (v *__RecentSeriesReleasesInput) GetTo() time.Time { return v.To }

// GetFrom returns __RecentSeriesReleasesInput.From, and is useful for accessing the field via an interface.
func (v *__RecentSeriesReleasesInput) GetFrom() time.Time { return v.From }

// GetSlug returns __RecentSeriesReleasesInput.Slug, and is useful for accessing the field via an interface.
func (v *__RecentSeriesReleasesInput) GetSlug() []string { return v.Slug }

// GetCompilations returns __RecentSeriesReleasesInput.Compilations, and is useful for accessing the field via an interface.
func (v *__RecentSeriesReleasesInput) GetCompilations() bool { return v.Compilations }

func (v *__RecentSeriesReleasesInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*__RecentSeriesReleasesInput
		To   json.RawMessage `json:"to"`
		From json.RawMessage `json:"from"`
		graphql.NoUnmarshalJSON
	}
	firstPass.__RecentSeriesReleasesInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.To
		src := firstPass.To
		if len(src) != 0 && string(src) != "null" {
			err = UnmarshalHardcoverDate(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal __RecentSeriesReleasesInput.To: %w", err)
			}
		}
	}

	{
		dst := &v.From
		src := firstPass.From
		if len(src) != 0 && string(src) != "null" {
			err = UnmarshalHardcoverDate(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal __RecentSeriesReleasesInput.From: %w", err)
			}
		}
	}
	return nil
}

type __premarshal__RecentSeriesReleasesInput struct {
	To json.RawMessage `json:"to"`

	From json.RawMessage `json:"from"`

	Slug []string `json:"slug"`

	Compilations bool `json:"compilations"`
}

func (v *__RecentSeriesReleasesInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *__RecentSeriesReleasesInput) __premarshalJSON() (*__premarshal__RecentSeriesReleasesInput, error) {
	var retval __premarshal__RecentSeriesReleasesInput

	{

		dst := &retval.To
		src := v.To
		var err error
		*dst, err = MarshalHardcoverDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal __RecentSeriesReleasesInput.To: %w", err)
		}
	}
	{

		dst := &retval.From
		src := v.From
		var err error
		*dst, err = MarshalHardcoverDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal __RecentSeriesReleasesInput.From: %w", err)
		}
	}
	retval.Slug = v.Slug
	retval.Compilations = v.Compilations
	return &retval, nil
}

// __UserInterestsInput is used internally by genqlient
type __UserInterestsInput struct {
	Username string    `json:"username"`
	From     time.Time `json:"-"`
}

// GetUsername returns __UserInterestsInput.Username, and is useful for accessing the field via an interface.
func (v *__UserInterestsInput) GetUsername() string { return v.Username }

// GetFrom returns __UserInterestsInput.From, and is useful for accessing the field via an interface.
func (v *__UserInterestsInput) GetFrom() time.Time { return v.From }

func (v *__UserInterestsInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*__UserInterestsInput
		From json.RawMessage `json:"from"`
		graphql.NoUnmarshalJSON
	}
	firstPass.__UserInterestsInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.From
		src := firstPass.From
		if len(src) != 0 && string(src) != "null" {
			err = UnmarshalHardcoverDate(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal __UserInterestsInput.From: %w", err)
			}
		}
	}
	return nil
}

type __premarshal__UserInterestsInput struct {
	Username string `json:"username"`

	From json.RawMessage `json:"from"`
}

func (v *__UserInterestsInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *__UserInterestsInput) __premarshalJSON() (*__premarshal__UserInterestsInput, error) {
	var retval __premarshal__UserInterestsInput

	retval.Username = v.Username
	{

		dst := &retval.From
		src := v.From
		var err error
		*dst, err = MarshalHardcoverDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal __UserInterestsInput.From: %w", err)
		}
	}
	return &retval, nil
}

// The query executed by RecentAuthorReleases.
const RecentAuthorReleases_Operation = `
query RecentAuthorReleases ($to: date, $from: date, $slug: [String!], $compilations: Boolean = false) {
	authors(where: {slug:{_in:$slug}}) {
		name
		slug
		contributions(where: {contribution:{_is_null:true},book:{release_date:{_lte:$to,_gte:$from},book_mappings:{id:{_is_null:false}},compilation:{_in:[$compilations,false]}}}, order_by: {book:{release_date:desc_nulls_last}}, limit: 25) {
			author {
				name
			}
			book {
				... Book
			}
		}
	}
}
fragment Book on books {
	id
	slug
	title
	releaseDate: release_date
	headline
	description
	genres: cached_tags(path: "Genre")
	contributions {
		author {
			name
		}
	}
	compilation
	image: cached_image
	featuredSeries: cached_featured_series
}
`

func RecentAuthorReleases(
	ctx_ context.Context,
	client_ graphql.Client,
	to time.Time,
	from time.Time,
	slug []string,
	compilations bool,
) (data_ *RecentAuthorReleasesResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "RecentAuthorReleases",
		Query:  RecentAuthorReleases_Operation,
		Variables: &__RecentAuthorReleasesInput{
			To:           to,
			From:         from,
			Slug:         slug,
			Compilations: compilations,
		},
	}

	data_ = &RecentAuthorReleasesResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by RecentReleases.
const RecentReleases_Operation = `
query RecentReleases ($to: date, $from: date) {
	books(order_by: {users_count:desc_nulls_last}, where: {release_date:{_lte:$to,_gte:$from}}, limit: 25) {
		... Book
	}
}
fragment Book on books {
	id
	slug
	title
	releaseDate: release_date
	headline
	description
	genres: cached_tags(path: "Genre")
	contributions {
		author {
			name
		}
	}
	compilation
	image: cached_image
	featuredSeries: cached_featured_series
}
`

func RecentReleases(
	ctx_ context.Context,
	client_ graphql.Client,
	to time.Time,
	from time.Time,
) (data_ *RecentReleasesResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "RecentReleases",
		Query:  RecentReleases_Operation,
		Variables: &__RecentReleasesInput{
			To:   to,
			From: from,
		},
	}

	data_ = &RecentReleasesResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by RecentSeriesReleases.
const RecentSeriesReleases_Operation = `
query RecentSeriesReleases ($to: date, $from: date, $slug: [String!], $compilations: Boolean = false) {
	series(where: {slug:{_in:$slug}}) {
		name
		slug
	}
	bookSeries: book_series(where: {series:{slug:{_in:$slug}},book:{release_date:{_lte:$to,_gte:$from},book_mappings:{id:{_is_null:false}},compilation:{_in:[$compilations,false]}}}, order_by: {book:{release_date:desc_nulls_last}}, limit: 25) {
		series {
			slug
		}
		book {
			... Book
		}
	}
}
fragment Book on books {
	id
	slug
	title
	releaseDate: release_date
	headline
	description
	genres: cached_tags(path: "Genre")
	contributions {
		author {
			name
		}
	}
	compilation
	image: cached_image
	featuredSeries: cached_featured_series
}
`

func RecentSeriesReleases(
	ctx_ context.Context,
	client_ graphql.Client,
	to time.Time,
	from time.Time,
	slug []string,
	compilations bool,
) (data_ *RecentSeriesReleasesResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "RecentSeriesReleases",
		Query:  RecentSeriesReleases_Operation,
		Variables: &__RecentSeriesReleasesInput{
			To:           to,
			From:         from,
			Slug:         slug,
			Compilations: compilations,
		},
	}

	data_ = &RecentSeriesReleasesResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by UserInterests.
const UserInterests_Operation = `
query UserInterests ($username: citext, $from: date) {
	users(where: {username:{_eq:$username}}) {
		username
	}
	userBooks: user_books(where: {user:{username:{_eq:$username}},status_id:{_eq:3},last_read_date:{_gt:$from}}) {
		book {
			slug
			contributors: cached_contributors
			featuredSeries: cached_featured_series
		}
	}
}
`

func UserInterests(
	ctx_ context.Context,
	client_ graphql.Client,
	username string,
	from time.Time,
) (data_ *UserInterestsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UserInterests",
		Query:  UserInterests_Operation,
		Variables: &__UserInterestsInput{
			Username: username,
			From:     from,
		},
	}

	data_ = &UserInterestsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
